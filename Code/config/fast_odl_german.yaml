logging.path: "./lightning_logs/figure_1/${dataset.name}"
logging.name: "model=${model._target_}-backbone=${model.nn.backbone._target_}-lr=${model.optimizer.lr}-width=${model.nn.backbone.qtd_neuron_per_hidden_layer}-layers=${model.nn.backbone.max_num_hidden_layers}-loss=${model.loss._target_}-seed=${random.seed}"

dataset._target_: dataset.GermanDataModule
dataset.name: "german"
dataset.num_workers: 1
dataset.persistent_workers: True
dataset.batch_size: 1

random.seed: !!python/tuple [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]

trainer.max_epochs: 1
trainer.log_every_n_steps: 1
trainer.devices: 1
trainer.accelerator: 'cpu'
trainer.fast_dev_run: False

model._target_: model.OnlineLearner
model.loss._target_: torch.nn.CrossEntropyLoss

model.nn.backbone._target_: modules.Fast_AuxDrop_ODL
model.nn.backbone.features_size: 2
model.nn.backbone.n_aux_feat: 22
# model.nn.backbone.max_num_hidden_layers: !!python/tuple [4,5,6,7,8]
model.nn.backbone.max_num_hidden_layers: 6
# model.nn.backbone.qtd_neuron_per_hidden_layer: !!python/tuple [15,25,50,100]
model.nn.backbone.qtd_neuron_per_hidden_layer: 50
model.nn.backbone.n_classes: 2
model.nn.backbone.aux_layer: 3
model.nn.backbone.n_neuron_aux_layer: 100
model.nn.backbone.dropout: 0.3

model.optimizer._target_: torch.optim.SGD
model.optimizer.lr: 0.1
# model.scheduler._target_: torch.optim.lr_scheduler.LinearLR
# model.scheduler.warmup_updates: 0
# model.scheduler.warmup_end_lr: "${model.optimizer.lr}"

# taskset -c "0-4" python run_hydra.py --config=config/fast_odl_german.yaml
