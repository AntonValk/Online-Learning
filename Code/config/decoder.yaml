logging.path: "./lightning_logs/new/${dataset.name}"
logging.name: "model=${model._target_}-backbone=${model.nn.backbone._target_}-lr=${model.optimizer.lr}-width=${model.nn.backbone.d_model}-loss=${model.loss._target_}-num_layers=${model.nn.backbone.num_layers_stage}-num_blocks=${model.nn.backbone.num_blocks_stage}-seed=${random.seed}"

dataset._target_: dataset.GermanDataModule
dataset.name: "german"
dataset.num_workers: 1
dataset.persistent_workers: True
dataset.batch_size: 1

random.seed: !!python/tuple [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
# random.seed: 0

trainer.max_epochs: 1
# trainer.check_val_every_n_epoch: 1
trainer.log_every_n_steps: 1
trainer.devices: 1
trainer.accelerator: 'cpu'
trainer.fast_dev_run: False

model._target_: model.OnlineLearner
model.loss._target_: torch.nn.CrossEntropyLoss

model.nn.backbone._target_: modules.SetDecoder 
model.nn.backbone.d_model: !!python/tuple [10,25,50,100]
model.nn.backbone.dropout: 0.3
model.nn.backbone.size_in: 1
model.nn.backbone.num_blocks_enc: 0
model.nn.backbone.num_blocks_stage: !!python/tuple [1,2,3,4,5,6,7,8]
model.nn.backbone.layer_width_enc: "${model.nn.backbone.d_model}"
model.nn.backbone.layer_width_stage: "${model.nn.backbone.d_model}"
model.nn.backbone.size_out: 2
model.nn.backbone.embedding_dim: 3
model.nn.backbone.num_layers_enc: 0
model.nn.backbone.num_layers_stage: !!python/tuple [1,2,3,4]

model.optimizer._target_: torch.optim.SGD
# model.optimizer.lr: 0.01
model.optimizer.lr: 0.1

# python run.py --config=config/proto_two_stage_ODL.yaml
# taskset -c "0-4" python run_hydra.py --config=config/proto_two_stage_ODL.yaml
